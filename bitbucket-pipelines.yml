image: nikolaik/python-nodejs:python3.5-nodejs10

definitions:
  caches:
    globalnodev4: /usr/local/lib/node_modules

pipelines:
  default:
    - step:
        name: Lint
        caches:
          - node 
        script:
          - npm install
          - npm run lint
  branches:
    master:
        - step:
            name: Upload template through dashboard
            caches:
              - globalnodev4
            script:
              - npm run pipeline
              - design-framework-cli push -e auto
              - declare -x VERSION=$(node -pe "require('./package.json').version")
              # install gulp
              - npm i gulp-cli -g
              # install node modules
              - npm i          
              # build dist folder
              - gulp bundle:prod
              # download pip 
              - curl -O https://bootstrap.pypa.io/get-pip.py
              # install pip
              - python get-pip.py
              # install aws CLI  
              - pip install awscli
              # get version from package.json
              - declare -x VERSION=$(node -pe "require('./package.json').version")
              # copy files to s3 bucket with versioned folder
              - aws s3 sync --delete ./dist/ s3://design-framework-core/staging/$VERSION 
              - aws s3 cp df-dist.zip s3://design-framework-core/staging/$VERSION 
              # Write version to a JSON file in dist
              - aws s3 cp ./dist/ s3://design-framework-core/latest/ --recursive
              - aws s3 cp df-dist.zip s3://design-framework-core/latest/ 
              # Store JSON file in latest to see the current version
              - aws s3 cp ./s3/version-info.json s3://design-framework-core/latest/ 
    release/*:
        - step:
            name: Release and Upload            
            caches:
              - globalnodev4
            script:
              - npm run pipeline
              - design-framework-cli fly topup
              # - design-framework-cli push -e auto
              # get version from package.json
              - declare -x VERSION=$(node -pe "require('./package.json').version")
              # install gulp
              - npm i gulp-cli -g
              # install node modules
              - npm i          
              # build dist folder
              - gulp bundle:prod
              # download pip 
              - curl -O https://bootstrap.pypa.io/get-pip.py
              # install pip
              - python get-pip.py
              # install aws CLI  
              - pip install awscli
              # copy files to s3 bucket with versioned folder
              - aws s3 sync --delete ./dist/ s3://design-framework-core/staging/$VERSION 
              - aws s3 cp df-dist.zip s3://design-framework-core/staging/$VERSION 
    test-branch:
        - step:
            name: Release candidate          
            caches:
              - globalnodev4
            script:
              - npm run pipeline
              - git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
              - git fetch
              - git checkout package-lock.json
              - design-framework-cli fly stage
  custom:
    upload:
      - step:
          name: Upload template through dashboard
          caches:
            - globalnodev4
          script:
            - npm run pipeline
            - design-framework-cli push -e auto -f true
    bundle:
      - step:
          name: Bundle the template and share it through slack
          caches:
            - globalnodev4
          script:
            - npm run pipeline
            - design-framework-cli push -u false -f true
    finish:
      - step:
          name: Merge release to master
          caches:
            - globalnodev4
          script:
            - npm run pipeline
            - echo $MSG
            - git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
            - git fetch
            - git checkout package-lock.json
            - design-framework-cli fly finish -m "$MSG"
    topup:
      - step:
          name: Topup release
          caches:
            - globalnodev4
          script:
            - npm run pipeline
            - echo $MSG
            - git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
            - git fetch
            - git checkout package-lock.json
            - design-framework-cli fly topup -m "$MSG"
    stage:
      - step:
          name: Release candidate
          caches:
            - globalnodev4
          script:
            - npm run pipeline
            - echo $MSG
            - git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
            - git fetch
            - git checkout package-lock.json
            - design-framework-cli fly stage -m "$MSG"
    sync:
      - step:
          name: Merge master to develop
          caches:
            - globalnodev4
          script:
            - npm run pipeline
            - echo $MSG
            - git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
            - git fetch
            - git checkout package-lock.json
            - design-framework-cli fly sync -m "$MSG"
    prepare:
      - step:
          name: Prepare for next pipeline
          caches:
            - globalnodev4
          script:
            - echo $MSG
            - git commit --allow-empty -m "$MSG"
            - git push origin
