# This is a sample build configuration for JavaScript.
# Check our guides at https://confluence.atlassian.com/x/14UWN for more examples.
# Only use spaces to indent your .yml configuration.
# -----
# You can specify a custom docker image from Docker Hub as your build environment.
image: nikolaik/python-nodejs:python3.5-nodejs8
definitions:
  caches:
    globalnode: /usr/local/lib/node_modules

pipelines:
  branches:
    master:
      - step:
          name: "Increment version"
          caches:
             - node
          script:
             # identity setup for git push
             - git config --global user.name "Vungle Services"
             - git config --global user.email "vungle.services@vungle.com"
             - git remote -v
             - git remote show origin
             # install gulp
             - npm i gulp-cli -g
             # install node modules
             - npm i          
             # increment version
             - npm run versioning
             # build dist folder
             - gulp bundle:prod
             # Write version to a JSON file in dist
             - npm run create-version-file
             # Get version from package.json
             - declare -x VERSION=$(node -pe "require('./package.json').version")
             # display version 
             - echo $VERSION
             # config setup for git push
             - git config --global push.default simple 
             # Commit package.json 
             - git add package.json
             # push Commit with message ,"skip CI" Required to avoid re-running this CI upon git push
             - git commit -m "bumped to version $VERSION [skip CI]" 
             - git push origin
             # commit will be tagged with version
             - git tag $VERSION
             - git remote -v
             # push new tagging
             - git push origin --tags
             # download pip 
             - curl -O https://bootstrap.pypa.io/get-pip.py
             # install pip
             - python get-pip.py
             # install aws CLI  
             - pip install awscli
             # copy files to s3 bucket with versioned folder
             - aws s3 cp ./dist/ s3://design-framework-core/$VERSION/ --recursive
             - aws s3 cp df-dist.zip s3://design-framework-core/$VERSION/ 
             # overwrite latest folder with new version
             - aws s3 cp ./dist/ s3://design-framework-core/latest/ --recursive
             - aws s3 cp df-dist.zip s3://design-framework-core/latest/ 
             # Store JSON file in latest to see the current version
             - aws s3 cp ./s3/version-info.json s3://design-framework-core/latest/ 
    staging:
      - step:
          name: "Push to Staging"
          caches:
             - node
          script:
             # install gulp
             - npm i gulp-cli -g
             # install node modules
             - npm i          
             # build dist folder
             - gulp bundle:prod
             # download pip 
             - curl -O https://bootstrap.pypa.io/get-pip.py
             # install pip
             - python get-pip.py
             # install aws CLI  
             - pip install awscli
             # copy files to s3 bucket with versioned folder
             - aws s3 sync --delete ./dist/ s3://design-framework-core/staging/ 
             - aws s3 cp df-dist.zip s3://design-framework-core/staging/ 