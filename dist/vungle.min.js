(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

var _vungleAdCore = require('./vungle-ad-core.js');

var _vungleAdCore2 = _interopRequireDefault(_vungleAdCore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

window.addEventListener('load', function () {
    _vungleAdCore2.default.init(function () {
        console.log('VUNGLE AD - ready');
    });
});

var eventMethod = window.addEventListener ? "addEventListener" : "attachEvent";
var eventer = window[eventMethod];
var messageEvent = eventMethod == "attachEvent" ? "onmessage" : "message";

// Listen to message from child window
eventer(messageEvent, function (e) {
    switch (e.data) {
        case 'close':
            window.callSDK('close');
            break;
        case 'download':
            window.callSDK('download');
            break;
    }
}, false);

},{"./vungle-ad-core.js":2}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vungleAdHelpers = require('./vungle-ad-helpers.js');

var _vungleAdHelpers2 = _interopRequireDefault(_vungleAdHelpers);

var _vungleAdMraidHelper = require('./vungle-ad-mraid-helper.js');

var _vungleAdMraidHelper2 = _interopRequireDefault(_vungleAdMraidHelper);

var _vungleAdPrivacy = require('./vungle-ad-privacy.js');

var _vungleAdPrivacy2 = _interopRequireDefault(_vungleAdPrivacy);

var _vungleAd = require('./vungle-ad.js');

var _vungleAd2 = _interopRequireDefault(_vungleAd);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* ----- Vungle Design Framework - JS ad core initialisation ----- */

var adcore = {
    init: async function init(onEndcardStart) {

        await _vungleAdMraidHelper2.default.checkMRAIDStatus();
        this.controller(onEndcardStart);
    },
    controller: function controller(onEndcardStart) {

        var vungleAd = document.getElementById('vungle-ad');
        window.vungleMRAID = _vungleAdMraidHelper2.default;

        //check for either vungle or standard MRAID
        vungleMRAID.checkMRAIDStatus();

        var achievedReward, isStoreViewPrepared, mraidVersion;
        var blockCtaEvent = false;
        var dynamicElement = null;
        var placementType = null; //["fullscreen", "Unknown", "flexview", "flexfeed", "mrec"]
        var storeViewTypes = ["unknown", "fullscreen"];
        var gdprConsentRequired = false;

        var defaultEndcardOnlyDurationSeconds = 25; //25 seconds
        var minimumPercentageContainerSize = 45;

        _vungleAd2.default.init();

        var appStoreId = _vungleAdHelpers2.default.getApiIdFromUrl(_vungleAd2.default.tokens.CTA_BUTTON_URL);
        placementType = window.vungle.mraid.getPlacementType().trim().toLowerCase();

        if ("getMraidVersion" in window.vungle.mraidExt) {
            mraidVersion = window.vungle.mraidExt.getMraidVersion();
        }

        window.callSDK = function (event) {
            if (!(window.vungle && window.vungle.mraidBridgeExt)) {
                // console log successful SDK call in dev mode
                console.log('%c Vungle SDK action ' + event, 'color: #008800');
                return;
            }

            if (!blockCtaEvent) {
                ctaButtonClicked();
            }
        };

        //attach CTA click on all elements with class mraid-cta
        var ctaElements = document.querySelectorAll('.mraid-cta');
        for (var i = 0; i < ctaElements.length; i++) {
            ctaElements[i].addEventListener('click', ctaButtonClicked, false);
        }

        _vungleAdPrivacy2.default.init();

        document.getElementById('ad-notification-modal-title-text').innerHTML = _vungleAd2.default.tokens.INCENTIVIZED_TITLE_TEXT;
        document.getElementById('ad-notification-modal-body-text').innerHTML = _vungleAd2.default.tokens.INCENTIVIZED_BODY_TEXT;
        document.getElementById('ad-notification-modal-continue').innerHTML = _vungleAd2.default.tokens.INCENTIVIZED_CONTINUE_TEXT;
        document.getElementById('ad-notification-modal-close').innerHTML = _vungleAd2.default.tokens.INCENTIVIZED_CLOSE_TEXT;

        document.ontouchmove = function (event) {
            event.preventDefault();
        };

        window.addEventListener('resize', function (event) {
            vungleAd.style.opacity = 0;

            if (this.resizeTimer) {
                clearTimeout(this.resizeTimer);
            }
            this.resizeTimer = setTimeout(function () {
                renderVungleAdSizingClass();
                vungleAd.style.opacity = 1;
            }, 20);
        });

        //Called when Ad loads
        renderVungleAdSizingClass();

        var fullscreenVideoElement = document.getElementById('vungle-fullscreen-video');

        function getDynamicElement() {
            if (!dynamicElement) {
                dynamicElement = document.querySelector("#dynamic");
            }
            return dynamicElement;
        }

        getDynamicElement().addEventListener("vungle.events.preparestore.finished", onNotifyPresentStoreViewFinished);
        getDynamicElement().addEventListener("vungle.events.preparestore.success", onNotifyPrepareStoreViewSuccess);

        function prepareStoreView() {
            console.log('3 prepare store view: ' + appStoreId);
            window.vungle.mraidExt.prepareStoreView(appStoreId);
        }

        function onNotifyPrepareStoreViewSuccess() {
            console.log('on notify prepare store view success');
            isStoreViewPrepared = true;
        }

        function onNotifyPresentStoreViewFinished() {
            console.log('1 on notify present store view finished');
            // In-app store view is supported only on iOS. We should trigger this.prepareStoreView() only for iOS.
            isStoreViewPrepared = false;
            if (_vungleAdHelpers2.default.getOS() === "ios" && storeViewTypes.indexOf(placementType) !== -1) {
                console.log('2 call prepare store view');
                prepareStoreView();
            }
        }

        onNotifyPresentStoreViewFinished();

        switch (_vungleAd2.default.tokens.CREATIVE_VIEW_TYPE) {
            case "video_and_endcard":
                fullscreenVideoElement.src = tokens.video;
                fullscreenVideoElement.addEventListener('ended', function () {
                    fullscreenVideoElement.className = 'hide';
                    if (onEndcardStart) {
                        //run any code defined in main.js
                        onEndcardStart();
                    }
                });
                break;
            case "inline_video_endcard":
                fullscreenVideoElement.src = tokens.video;
                if (typeof fullscreenVideoElement.loop == 'boolean') {
                    // loop supported
                    fullscreenVideoElement.loop = true;
                } else {
                    // loop property not supported
                    fullscreenVideoElement.addEventListener('ended', function () {
                        this.currentTime = 0;
                        this.play();
                    }, false);
                }
                if (onEndcardStart) {
                    //run any code defined in main.js
                    onEndcardStart();
                }
                break;
            case "Endcard":
                if (onEndcardStart) {
                    //run any code defined in main.js
                    onEndcardStart();
                }
                fullscreenVideoElement.className = 'hide';
                break;
        }

        if ("getConsentRequired" in window.vungle.mraid) {
            gdprConsentRequired = window.vungle.mraid.getConsentRequired();

            if (gdprConsentRequired) {
                revealGDPRNotificationView();
            } else {
                renderAdIFrame();
            }
        } else {
            renderAdIFrame();
        }

        function getMaxAdDuration() {
            if (!_vungleAd2.default.tokens.hasOwnProperty("ENDCARD_ONLY_DURATION_SECONDS")) {
                //use hardcoded value
                return defaultEndcardOnlyDurationSeconds;
            } else {
                //use token value
                return parseFloat(_vungleAd2.default.tokens.ENDCARD_ONLY_DURATION_SECONDS);
            }
        }

        function closeButtonTimer() {
            var closeButton = document.getElementById('vungle-close');
            var delaySeconds, rewardedAdDuration;

            rewardedAdDuration = 80 / 100 * getMaxAdDuration(); //80% of max ad duration

            if (_vungleAd2.default.isAdIncentivised()) {
                delaySeconds = parseFloat(_vungleAd2.default.tokens.INCENTIVIZED_CLOSE_BUTTON_DELAY_SECONDS);
                console.log('INCENTIVISED - close icon delay:' + delaySeconds);
            } else {
                delaySeconds = parseFloat(_vungleAd2.default.tokens.CLOSE_BUTTON_DELAY_SECONDS);
                console.log('NON-INCENTIVISED - close icon delay:' + delaySeconds);
            }

            //ENDCARD ONLY TEMPLATE
            if (delaySeconds == 0) {
                revealCloseButton(0);
                successfulViewEventTimer(rewardedAdDuration);
                console.log('SUCCESSFUL VIEW - ' + rewardedAdDuration);
            } else if (delaySeconds == 9999) {
                revealCloseButton(getMaxAdDuration());
                successfulViewEventTimer(getMaxAdDuration());
                console.log('SUCCESSFUL VIEW - ' + getMaxAdDuration());
            } else {
                revealCloseButton(delaySeconds);
                successfulViewEventTimer(rewardedAdDuration);
                console.log('SUCCESSFUL VIEW - ' + rewardedAdDuration);
            }

            //INLINE VIDEO TEMPLATE

            //FULL SCREEN VIDEO TEMPLATE
        }

        function successfulViewEventTimer(eventTimer) {
            console.log('TIMER SUCCESSFUL VIEW - begin');
            eventTimer = eventTimer * 1000; //convert to milliseconds

            setTimeout(function () {
                achievedReward = true;
                console.log('TIMER SUCCESSFUL VIEW - complete');

                window.vungle.mraidBridgeExt.notifySuccessfulViewAd();
                window.vungle.mraidBridgeExt.notifyEventValuePairEvent("videoViewed", 9);
            }, eventTimer);
        }

        function renderAdIFrame() {
            document.getElementById('endcard-view').innerHTML = '<iframe id="ad-content" src="ad.html" style="overflow:hidden;height:100%;width:100%" height="100%" width="100%"></iframe>';

            //start close button timer once iFrame has been loaded and is visible to user
            closeButtonTimer();

            //send postroll.view TPAT event once iFrame has loaded
            window.vungle.mraidBridgeExt.notifyTPAT("postroll.view");

            //ENDCARD ONLY TEMPLATE
            window.vungle.mraidBridgeExt.notifyEventValuePairEvent("videoLength", 10);
            window.vungle.mraidBridgeExt.notifyEventValuePairEvent("videoViewed", 0);
            window.vungle.mraidBridgeExt.notifyEventValuePairEvent("videoViewed", 1);
        }

        function renderVungleAdSizingClass() {

            var vungleAdContainer = document.getElementById('dynamic');
            var longestSide = Math.max(vungleAdContainer.offsetHeight, vungleAdContainer.offsetWidth);
            var shortestSide = Math.min(vungleAdContainer.offsetHeight, vungleAdContainer.offsetWidth);

            var theme;
            if (typeof theme === 'undefined' || theme === null) {
                theme = 'light';
            }

            var minimumContainerSize = minimumPercentageContainerSize / 100 * longestSide;
            var adSizeSegmentLength = (longestSide - minimumContainerSize) / _vungleAd2.default.adSizes.length;
            var arrayCount = Math.floor((shortestSide - minimumContainerSize) / adSizeSegmentLength);

            var adShape, computedSize;
            var adSizeClass = '';

            if (longestSide === shortestSide) {
                //Square ad unit
                adShape = 'square';
            } else if (document.body.clientHeight > document.body.clientWidth) {
                //Portrait ad unit
                adShape = 'portrait';
                if (_vungleAd2.default.adSizes[arrayCount]) {
                    computedSize = _vungleAd2.default.adSizes[arrayCount];
                    adSizeClass = ' portrait-' + computedSize;
                } else {
                    computedSize = _vungleAd2.default.adSizes[_vungleAd2.default.adSizes.length - 1];
                    adSizeClass = ' portrait-' + computedSize + ' oob';
                }
            } else {
                //Landscape ad unit
                adShape = 'landscape';
                if (_vungleAd2.default.adSizes[arrayCount]) {
                    computedSize = _vungleAd2.default.adSizes[arrayCount];
                    adSizeClass = ' landscape-' + computedSize;
                } else {
                    computedSize = _vungleAd2.default.adSizes[arrayCount];
                    adSizeClass = ' landscape-' + computedSize + ' oob';
                }
            }

            var adClassName = adShape.concat(adSizeClass);

            //Append body tag with appropriate classnames
            document.body.className = adClassName + ' ' + theme + ' ' + _vungleAdHelpers2.default.getOS();

            _vungleAd2.default.shape = adShape;
            _vungleAd2.default.sizeClass = computedSize;
            _vungleAd2.default.theme = theme;
            _vungleAd2.default.os = _vungleAdHelpers2.default.getOS();
        }

        function revealAdNotificationModal() {
            var adModal = document.getElementById('ad-notification-modal');
            var adModalContinue = document.getElementById('ad-notification-modal-continue');
            var adModalClose = document.getElementById('ad-notification-modal-close');
            var closeButton = document.getElementById('vungle-close');
            var privacyIcon = document.getElementById('privacy-icon');

            adModal.className = '';
            hideCloseButton();
            hidePrivacyButton();

            adModalContinue.onclick = function () {
                _vungleAdHelpers2.default.addClass(adModal, 'hide');
                _vungleAdHelpers2.default.removeClass(closeButton, 'hide');
                _vungleAdHelpers2.default.removeClass(privacyIcon, 'hide');
            };
            adModalClose.onclick = function () {
                vungleMRAID.close();
            };
        }

        function revealGDPRNotificationView() {

            var gdprView = document.getElementById('gdpr-notification-view');

            var gdprViewConsentButton = document.getElementById('gdpr-notification-consent');
            var gdprViewDoNotConsentButton = document.getElementById('gdpr-notification-no-consent');

            document.getElementById('gdpr-notification-title-text').innerHTML = window.vungle.mraid.getConsentTitleText();
            document.getElementById('gdpr-notification-body-text').innerHTML = window.vungle.mraid.getConsentBodyText();
            document.getElementById('gdpr-notification-consent').innerHTML = window.vungle.mraid.getConsentAcceptButtonText();
            document.getElementById('gdpr-notification-no-consent').innerHTML = window.vungle.mraid.getConsentDenyButtonText();

            _vungleAdHelpers2.default.removeClass(gdprView, 'hide');

            gdprViewConsentButton.onclick = function () {
                window.vungle.mraidBridgeExt.consentAction("opted_in");
                renderAdIFrame();
                _vungleAdHelpers2.default.addClass(gdprView, 'hide');
            };

            gdprViewDoNotConsentButton.onclick = function () {
                window.vungle.mraidBridgeExt.consentAction("opted_out");
                renderAdIFrame();
                _vungleAdHelpers2.default.addClass(gdprView, 'hide');
            };
        }

        function revealCloseButton() {
            var showCloseButtonTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

            console.log('TIMER CLOSE ICON - begin');
            var closeButton = document.getElementById('vungle-close');

            showCloseButtonTime = showCloseButtonTime * 1000;

            setTimeout(function () {
                console.log('TIMER CLOSE ICON - complete');
                closeButton.className = '';
                closeButton.onclick = function () {

                    var onClickTimeStamp = new Date();

                    if (_vungleAd2.default.isAdIncentivised()) {
                        console.log('TIMER CLOSE ICON - incentivised');
                        if (achievedReward) {
                            vungleMRAID.close();
                        } else {
                            revealAdNotificationModal();
                        }
                    } else {
                        console.log('TIMER CLOSE ICON - non-incentivised');
                        vungleMRAID.close();
                    }
                };
            }, showCloseButtonTime);
        }

        function revealPrivacyButton() {
            var privacyContainer = document.getElementById('privacy-container');
            _vungleAdHelpers2.default.removeClass(privacyContainer, 'hide');
        }

        function hideCloseButton() {
            var closeButton = document.getElementById('vungle-close');
            _vungleAdHelpers2.default.addClass(closeButton, 'hide');
        }

        function hidePrivacyButton() {
            var privacyIcon = document.getElementById('privacy-icon');
            _vungleAdHelpers2.default.addClass(privacyIcon, 'hide');
        }

        function ctaButtonClicked() {
            //send postroll.click and clickUrl TPAT events when CTA is clicked for campaign level tracking,
            //and postroll.click and download events for report_ad
            window.vungle.mraidBridgeExt.notifyTPAT("postroll.click");
            window.vungle.mraidBridgeExt.notifyTPAT("clickUrl");
            window.vungle.mraidBridgeExt.notifyEventValuePairEvent("postroll.click", 1);
            window.vungle.mraidBridgeExt.notifyEventValuePairEvent("download", 1);

            // 6.3.2 Hack - IOS-2140
            if (!mraidVersion && _vungleAdHelpers2.default.getOS() === "ios" && appStoreId && isStoreViewPrepared) {
                //Block future CTA events on 6.3.2 to avoid StoreKit bug
                blockCtaEvent = true;
            }

            if (_vungleAdHelpers2.default.getOS() === "ios" && appStoreId && isStoreViewPrepared) {
                window.vungle.mraidExt.presentStoreView(appStoreId);
            } else {
                vungleMRAID.open(_vungleAd2.default.tokens.CTA_BUTTON_URL);
            }
        }
    }
};

exports.default = adcore;

},{"./vungle-ad-helpers.js":3,"./vungle-ad-mraid-helper.js":4,"./vungle-ad-privacy.js":5,"./vungle-ad.js":6}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
/* ----- Vungle Design Framework - JS ad helper methods ----- */

/*	addClass() - add a classname to an element
	removeClass() - remove a classname from an element
	hasClass() - check if an element has a class
	getOS() - returns OS of browser user agent, either iOS, Android, Windows or null
	vungleVideoType() - returns info on Vungle video (ratio, classname, original video width/height)
	resizeVideo() - resizes video to fit parent container without visible black bars based on our supported ratios
*/

exports.default = {

    addClass: function addClass(elem, classString) {
        if (elem.classList) {
            elem.classList.add(classString);
        } else {
            elem.className += ' ' + classString;
        }
    },

    removeClass: function removeClass(elem, classString) {
        if (elem.classList) {
            elem.classList.remove(classString);
        } else {
            elem.className = elem.className.replace(new RegExp('(^|\\b)' + classString.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
        }
    },

    hasClass: function hasClass(elem, classString) {
        return (' ' + elem.className + ' ').indexOf(' ' + classString + ' ') > -1;
    },

    getOS: function getOS() {
        var userAgent = window.navigator.userAgent,
            platform = window.navigator.platform,
            macosPlatforms = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'],
            windowsPlatforms = ['Win32', 'Win64', 'Windows', 'WinCE'],
            iosPlatforms = ['iPhone', 'iPad', 'iPod'],
            os = null;

        if (macosPlatforms.indexOf(platform) !== -1 || iosPlatforms.indexOf(platform) !== -1) {
            os = 'ios';
        } else if (windowsPlatforms.indexOf(platform) !== -1) {
            os = 'windows';
        } else if (/Android/.test(userAgent)) {
            os = 'android';
        } else {
            os = '';
        }

        return os;
    },

    greatestCommonDivisor: function (_greatestCommonDivisor) {
        function greatestCommonDivisor(_x, _x2) {
            return _greatestCommonDivisor.apply(this, arguments);
        }

        greatestCommonDivisor.toString = function () {
            return _greatestCommonDivisor.toString();
        };

        return greatestCommonDivisor;
    }(function (a, b) {
        return b == 0 ? a : greatestCommonDivisor(b, a % b);
    }),

    vungleVideoType: function vungleVideoType(width, height) {
        var r = greatestCommonDivisor(width, height);
        var type;
        switch (width / r + ":" + height / r) {
            case "16:9":
                type = "landscape";
                break;
            case "9:16":
                type = "portrait";
                break;
            case "1:1":
                type = "square";
                break;
            default:
                type = "nonconform";
        }

        return {
            ratio: width / r + ":" + height / r,
            classname: "ratio" + width / r + "" + height / r,
            type: type,
            width: width,
            height: height
        };
    },

    resizeVideo: function resizeVideo(videoArea, videoHolderElem, videoContainerElem) {

        var ratio916 = 0.5625;
        var ratio916width = videoArea.offsetHeight * ratio916;
        var ratio916height = videoArea.offsetWidth / ratio916;

        var ratio169 = 0.5625;
        var ratio169width = videoArea.offsetHeight / ratio169;
        var ratio169height = videoArea.offsetWidth * ratio169;

        var ratio11width = videoArea.offsetHeight;
        var ratio11height = videoArea.offsetWidth;

        videoHolderElem.style.width = "";
        videoHolderElem.style.height = "";

        if (hasClass(document.body, 'portrait') || hasClass(document.body, 'square')) {
            if (vungleVideo.ratio === "9:16") {
                //Portrait ad unit
                if (ratio916width <= videoArea.offsetWidth) {
                    videoHolderElem.style.width = ratio916width + "px";
                } else {
                    videoHolderElem.style.height = ratio916height + "px";
                }
            } else if (vungleVideo.ratio === "16:9") {
                //Landscape ad unit
                if (ratio169height <= videoArea.offsetHeight) {
                    videoHolderElem.style.height = ratio169height + "px";
                } else {
                    videoHolderElem.style.width = ratio169width + "px";
                }
            } else {
                //Square ad unit
                if (ratio11width <= videoArea.offsetWidth) {
                    videoHolderElem.style.width = ratio11width + "px";
                } else {
                    videoHolderElem.style.height = ratio11height + "px";
                }
            }
        } else {
            if (vungleVideo.ratio === "9:16") {
                //Portrait ad unit
                if (ratio916height <= videoArea.offsetHeight) {
                    videoHolderElem.style.height = ratio916height + "px";
                } else {
                    videoHolderElem.style.width = ratio916width + "px";
                }
            } else if (vungleVideo.ratio === "16:9") {
                //Landscape ad unit
                if (ratio169height <= videoArea.offsetHeight) {
                    videoHolderElem.style.height = ratio169height + "px";
                } else {
                    videoHolderElem.style.width = ratio169width + "px";
                }
            } else {
                //Square ad unit
                if (ratio11width <= videoArea.offsetWidth) {
                    videoHolderElem.style.width = ratio11width + "px";
                } else {
                    videoHolderElem.style.height = ratio11height + "px";
                }
            }
        }
    },

    getApiIdFromUrl: function getApiIdFromUrl(ctaUrl) {
        if (!ctaUrl) {
            return null;
        }

        var uriArr = ctaUrl.match(/\/id([0-9]*)/i);
        if (uriArr && uriArr[1]) {
            return uriArr[1];
        }
        return null;
    }

};

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = {
    getAdState: getAdState,
    getCurrentPosition: getCurrentPosition,
    getDefaultPosition: getDefaultPosition,
    getExpandProperties: getExpandProperties,
    getMaxSize: getMaxSize,
    getPlacementType: getPlacementType,
    getResizeProperties: getResizeProperties,
    getScreenSize: getScreenSize,
    getState: getState,
    getVersion: getVersion,
    setExpandProperties: setExpandProperties,
    setResizeProperties: setResizeProperties,
    mraidReady: mraidReady,
    open: open,
    checkMRAIDStatus: checkMRAIDStatus,
    close: close,
    expand: expand,
    isViewable: isViewable,
    playVideo: playVideo,
    resize: resize,
    supports: supports,
    storePicture: storePicture,
    useCustomClose: useCustomClose,
    getMRAID: getMRAID
};


window.vungle = window.vungle || {};
var mraid = null;
var adState = false;
var isPublished = false;

function getMRAID() {
    if (!mraid) {
        mraid = window.vungle.mraid ? window.vungle.mraid : window.mraid;
    }
    return mraid;
};

async function checkMRAIDStatus() {
    return new Promise(function (resolve, reject) {
        if (getMRAID() && getMRAID().getState() === "loading") {
            var i = 0;
            var interval = setInterval(function () {
                if (getMRAID().getState() === "default") {
                    clearInterval(interval);
                    mraidReady();
                    resolve();
                } else {
                    i += 10;
                }
            }, 10);
        } else {
            mraidReady();
            resolve();
        }
    });
};

function mraidReady() {

    mraid.useCustomClose(); //used to hide the native close icon and replace with the Vungle header icon
    window.vungle.mraidExt.useCustomPrivacy(true);

    adState = true;
    // getMRAID().addEventListener("viewableChange", onAdViewableChange.bind(this));
};

function onAdViewableChange() {
    //Is toggled if publisher app goes into background and then resumed
    var videoElement = document.getElementsByTagName("video")[0];

    if (videoElement) {
        if (getMRAID().isViewable()) {
            videoElement.play();
        } else {
            videoElement.pause();
        }
    }

    if (getMRAID().isViewable() && !isPublished) {
        eventDispatcher.publish("event.endcardView");
        isPublished = true;
    }
};

function isViewable() {
    return getMRAID().isViewable();
};

function asyncLoadJavaScript(url, callback) {
    var scriptTag = document.createElement("script");

    scriptTag.type = "text/javascript";
    scriptTag.src = url;

    if (scriptTag.readyState) {
        scriptTag.onreadystatechange = function () {
            if (scriptTag.readyState === "loaded" || scriptTag.readyState === "completed") {
                scriptTag.onreadystatechange = null;
                callback && callback();
            }
        };
    } else {
        scriptTag.onload = function () {
            callback && callback();
        };
    }

    document.getElementsByTagName("head")[0].appendChild(scriptTag);
};

function getAdState() {
    return adState;
};

function open(url) {
    getMRAID().open(url);
};

function close() {
    getMRAID().close();
};

function getExpandProperties() {
    return getMRAID().getExpandProperties();
};

function getDefaultPosition() {
    return getMRAID().getDefaultPosition();
};

function getCurrentPosition() {
    return getMRAID().getCurrentPosition();
};

function getMaxSize() {
    return getMRAID().getMaxSize();
};

function getPlacementType() {
    return getMRAID().getPlacementType();
};

function getResizeProperties() {
    return getMRAID().getResizeProperties();
};

function getScreenSize() {
    return getMRAID().getScreenSize();
};

function getVersion() {
    return getMRAID().getVersion();
};

function playVideo() {
    return getMRAID().playVideo();
};

function resize() {
    return getMRAID().resize();
};

function setExpandProperties(properties) {
    getMRAID().setExpandProperties(properties);
};

function setResizeProperties(properties) {
    getMRAID().setResizeProperties(properties);
};

function storePicture(uri) {
    getMRAID().storePicture(uri);
};

function supports(feature) {
    return getMRAID().supports(feature);
};

function useCustomClose(flag) {
    getMRAID().useCustomClose(flag);
};

function createCalendarEvent() {
    //TODO: needs to implement!!!!!
};

function expand(url) {
    getMRAID().expand(url);
};

function getState() {
    getMRAID().getState();
};

},{}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = {

    init: function init() {

        var privacyTimer, privacySubTimer;

        var prefix = ''; // stop clashes
        var privacyUrl = 'http://vungle.com/privacy/';
        var privacyDuration = 2000;
        var privacySubDuration = 1000;
        var privacySubHideDuration = 500;
        var privacyIcon = document.getElementById(prefix + 'privacy-icon');

        // add click events
        document.getElementById(prefix + 'privacy-icon').addEventListener("click", privacyExtend);
        document.getElementById(prefix + 'privacy-back-button-container').addEventListener("click", hideIframe);

        function addClass(el, className) {

            if (!(el instanceof HTMLDivElement)) {
                el = document.getElementById(el);
            }

            if (el.classList) {
                el.classList.add(className);
            } else if (!hasClass(el, className)) {
                el.className += " " + className;
            }
        }

        function hasClass(el, className) {

            if (el.classList) {
                return el.classList.contains(className);
            } else {
                return !!el.className.match(new RegExp('(\\s|^)' + className + '(\\s|$)'));
            }
        }

        function removeClass(el, className) {

            if (!(el instanceof HTMLDivElement)) {
                el = document.getElementById(el);
            }

            if (el.classList) {
                el.classList.remove(className);
            } else if (hasClass(el, className)) {
                var reg = new RegExp('(\\s|^)' + className + '(\\s|$)');
                el.className = el.className.replace(reg, ' ');
            }
        }

        function hideIframe() {

            var loadingPage = document.getElementById(prefix + 'privacy-page-loading');

            removeClass(loadingPage, 'loaded');

            document.getElementById(prefix + 'privacy-page-wrapper').style.display = "none";
            document.getElementById(prefix + 'privacy-back-button-container').style.display = "none";
        }

        function showIFrame() {

            var loadingPage = document.getElementById(prefix + 'privacy-page-loading');
            var privacyPg = document.getElementById(prefix + 'privacy-page');

            document.getElementById(prefix + 'privacy-page-wrapper').style.display = "initial";
            document.getElementById(prefix + 'privacy-back-button-container').style.display = "initial";

            removeClass(loadingPage, 'loaded');
            addClass(loadingPage, 'loading');

            privacyPg.onload = function () {
                removeClass(loadingPage, 'loading');
                addClass(loadingPage, 'loaded');
            };

            privacyPg.src = privacyUrl;
        }

        function hidePrivacyIcon() {

            removeClass(privacyIcon, 'privacy-extended');

            privacySubTimer = setTimeout(function () {
                removeClass(privacyIcon, 'privacy-reverse');
            }, privacySubHideDuration);
        }

        function privacyExtend() {

            if (hasClass(privacyIcon, 'privacy-extended')) {
                showIFrame();
                hidePrivacyIcon();
                return;
            }

            addClass(privacyIcon, 'privacy-extended');

            clearTimeout(privacyTimer);

            privacyTimer = setTimeout(function () {
                hidePrivacyIcon();
            }, privacyDuration);

            privacySubTimer = setTimeout(function () {
                addClass(privacyIcon, 'privacy-reverse');
            }, privacySubDuration);
        }
    }
};

},{}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
/* ----- Vungle Design Framework - Ad ----- */

exports.default = {

    init: function init() {
        var VungleAd = {};

        this.adSizes = ['xs', 's', 'm', 'l', 'xl'];

        this.tokens = window.vungle.mraidBridgeExt.getReplacementTokens();
    },

    isAdIncentivised: function isAdIncentivised() {
        return window.vungle.mraidExt.getIncentivized();
    }
};

},{}]},{},[1]);
